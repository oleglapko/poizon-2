import math
import asyncio
import os
import requests
import xml.etree.ElementTree as ET
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from flask import Flask
from threading import Thread
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class Form(StatesGroup):
    waiting_for_category = State()
    waiting_for_price = State()
    waiting_for_delivery_type = State()
    waiting_for_tracking_code = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
new_calc_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üîÅ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç")]],
    resize_keyboard=True
)

start_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üõí –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç")],
        [KeyboardButton(text="üì¶ –û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ —é–∞–Ω—è
def get_cbr_exchange_rate():
    try:
        response = requests.get("https://www.cbr.ru/scripts/XML_daily.asp")
        response.encoding = "windows-1251"
        tree = ET.fromstring(response.text)
        for valute in tree.findall("Valute"):
            if valute.find("CharCode").text == "CNY":
                value = valute.find("Value").text.replace(",", ".")
                nominal = int(valute.find("Nominal").text)
                return float(value) / nominal
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –¶–ë: {e}")
        return 11.5

# –ß—Ç–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ Google Sheets
def get_order_status(order_code):
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
        client = gspread.authorize(creds)

        sheet = client.open("–ó–∞–∫–∞–∑—ã POIZON").sheet1
        records = sheet.get_all_records()

        for row in records:
            if row["–ö–æ–¥ –∑–∞–∫–∞–∑–∞"].strip().lower() == order_code.lower():
                return row["–°—Ç–∞—Ç—É—Å"]
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return None

# –•—ç–Ω–¥–ª–µ—Ä /start
@dp.message(F.text == "/start")
async def start_handler(message: Message, state: FSMContext):
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –∏–ª–∏ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑.",
        reply_markup=start_keyboard
    )
    await state.clear()

@dp.message(F.text == "üîÅ –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç")
@dp.message(F.text == "üõí –ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç")
async def restart_handler(message: Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:"
        "1. –û–±—É–≤—å üëü"
        "2. –§—É—Ç–±–æ–ª–∫–∞/—à—Ç–∞–Ω—ã/—Ö—É–¥–∏ üëï"
        "3. –î—Ä—É–≥–æ–µ ‚ùì"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (1, 2 –∏–ª–∏ 3):",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="1")],
                [KeyboardButton(text="2")],
                [KeyboardButton(text="3")],
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    await state.set_state(Form.waiting_for_category)

@dp.message(F.text == "üì¶ –û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑")
async def track_order_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @vasya_1):")
    await state.set_state(Form.waiting_for_tracking_code)

@dp.message(Form.waiting_for_tracking_code)
async def handle_tracking_code(message: Message, state: FSMContext):
    code = message.text.strip()
    status = get_order_status(code)
    if status:
       await message.answer(f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:\n<b>{status}</b>", parse_mode="HTML", reply_markup=new_calc_keyboard)

    else:
        await message.answer("–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=new_calc_keyboard)
    await state.clear()

@dp.message(Form.waiting_for_category)
async def category_handler(message: Message, state: FSMContext):
    category = message.text.strip()
    if category not in ["1", "2", "3"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1, 2 –∏–ª–∏ 3.")
        return
    if category == "3":
        await message.answer("–°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: @the_poiz_adm", reply_markup=new_calc_keyboard)
        await state.clear()
        return
    await state.update_data(category=category)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ —é–∞–Ω—è—Ö ¬•:", reply_markup=None)
    await state.set_state(Form.waiting_for_price)

@dp.message(Form.waiting_for_price)
async def price_handler(message: Message, state: FSMContext):
    try:
        price_yuan = float(message.text.strip())
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 289")
        return
    await state.update_data(price_yuan=price_yuan)

    delivery_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ê–≤—Ç–æ üöö")],
            [KeyboardButton(text="–ê–≤–∏–∞ ‚úàÔ∏è")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=delivery_keyboard)
    await state.set_state(Form.waiting_for_delivery_type)

@dp.message(Form.waiting_for_delivery_type)
async def delivery_type_handler(message: Message, state: FSMContext):
    delivery_type = message.text.strip()
    if delivery_type not in ["–ê–≤—Ç–æ üöö", "–ê–≤–∏–∞ ‚úàÔ∏è"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–ê–≤—Ç–æ üöö' –∏–ª–∏ '–ê–≤–∏–∞ ‚úàÔ∏è'")
        return

    data = await state.get_data()
    category = data["category"]
    price_yuan = data["price_yuan"]
    weight = 1.5 if category == "1" else 0.6
    delivery_rate = 800 if delivery_type == "–ê–≤—Ç–æ üöö" else 1900

    cbr_rate = get_cbr_exchange_rate()
    rate = cbr_rate * 1.09
    item_price_rub = price_yuan * rate
    delivery_cost = weight * delivery_rate
    commission = item_price_rub * 0.10
    total_item_price = math.ceil(item_price_rub + commission)
    total_cost = math.ceil(item_price_rub + delivery_cost + commission)

    await message.answer(
        f"<b>–†–∞—Å—á—ë—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏:</b>"
        f"–ö—É—Ä—Å —é–∞–Ω—è: {rate:.2f} ‚ÇΩ"
        f"–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_type}"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ —Å —É—á—ë—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ (10%): {total_item_price} ‚ÇΩ"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –ö–∏—Ç–∞—è: {math.ceil(delivery_cost)} ‚ÇΩ"
        f"<b>–ò—Ç–æ–≥–æ:</b> {total_cost} ‚ÇΩ"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –†–§ (–°–î–≠–ö, –ü–æ—á—Ç–∞, Boxberry) –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø—Ä–∏ –∑–∞–∫–∞–∑–µ."
        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ @the_poiz_adm.",
        reply_markup=new_calc_keyboard
    )
    await state.clear()

# –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –∏ –∑–∞–ø—É—Å–∫
async def delete_webhook_and_run():
    try:
        await bot.delete_webhook()
        print("–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫: {e}")
    await dp.start_polling(bot, skip_updates=True)

def start_bot():
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ long polling...")
    asyncio.run(delete_webhook_and_run())

# Flask-–∑–∞–≥–ª—É—à–∫–∞
app = Flask(__name__)

@app.route("/")
def home():
    return "Bot is running!"

def run_flask():
    app.run(host="0.0.0.0", port=5000)

if __name__ == "__main__":
    Thread(target=run_flask).start()
    start_bot()
